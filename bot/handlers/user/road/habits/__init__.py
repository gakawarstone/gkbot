from datetime import datetime

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from models.road import Habits  # FIXME
from ..states import FSM


async def habit_tracker(message: Message, state: FSMContext):
    await state.set_state(FSM.get_habit_name)
    await message.answer(
        "–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é</b> –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ü¶£")
    await message.answer(
        "–õ–∞–¥–Ω–æ –∑–∞—Å–∫–∞–º–ª–µ–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"
    )
    await message.answer(
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–æ—Ç–æ—Ä—É—é –º—ã —Å —Ç–æ–±–æ–π –±—É–¥–µ–º –ø—Ä–∏–≤–∏–≤–∞—Ç—å"
    )


async def get_habit_name(message: Message, state: FSMContext, data: dict):
    await state.set_state(FSM.get_habit_notify_time)
    data["habit_name"] = message.text
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –æ–± —É—Å–ø–µ—Ö–∞—Ö"
    )


async def get_habit_notify_time(message: Message, state: FSMContext, data: dict):
    await state.set_state(FSM.finish)

    if message.text is None:
        raise ValueError("message must not be None")

    if message.from_user is None:
        raise ValueError("message.from_user must not be None")

    time = datetime.strptime(message.text, "%H:%M").time()
    data["habit_notify_time"] = time

    await Habits.create(
        user_id=message.from_user.id,
        name=data["habit_name"],
        notify_time=data["habit_notify_time"],
    )
    await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")


def setup(r: Router):
    r.message.register(get_habit_name, StateFilter(FSM.get_habit_name))
    r.message.register(get_habit_notify_time, StateFilter(FSM.get_habit_notify_time))
